{
    "sourceFile": "project/src/components/PerformanceAnalysis.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1740384727204,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740385077927,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import React from \"react\";\r\n \r\n-const PerformanceAnalysis = ({ correctAnswers }) => {\r\n+const PerformanceAnalysis = ({ correctAnswers = [] }) => {\r\n   // Define question categories\r\n   const questionCategories = {\r\n     Addition: [1, 3, 6, 8, 9],\r\n     Subtraction: [2, 5, 8],\r\n@@ -15,8 +15,13 @@\n     Multiplication: 0,\r\n     Division: 0,\r\n   };\r\n \r\n+  // Ensure correctAnswers is a valid array before proceeding\r\n+  if (!Array.isArray(correctAnswers)) {\r\n+    return <p>Error: No correct answers data available.</p>;\r\n+  }\r\n+\r\n   // Count correct answers in each category\r\n   correctAnswers.forEach((q) => {\r\n     for (let category in questionCategories) {\r\n       if (questionCategories[category].includes(q)) {\r\n"
                },
                {
                    "date": 1740385262474,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,18 +34,19 @@\n   const operationCounts = Object.entries(questionStats);\r\n \r\n   // Finding max & min attempted operations\r\n   const maxCount = Math.max(...Object.values(questionStats));\r\n-  const minCount = Math.min(...Object.values(questionStats));\r\n \r\n-  // Identify strengths & weaknesses\r\n+  // Identify strengths\r\n   const strengths = operationCounts\r\n     .filter(([_, count]) => count === maxCount && count > 0)\r\n     .map(([operation]) => operation);\r\n \r\n-  const weaknesses = operationCounts\r\n-    .filter(([_, count]) => count === minCount && count > 0)\r\n-    .map(([operation]) => operation);\r\n+  // Identify weaknesses (All categories not in strengths)\r\n+  const allCategories = Object.keys(questionCategories);\r\n+  const weaknesses = allCategories.filter(\r\n+    (category) => !strengths.includes(category)\r\n+  );\r\n \r\n   return (\r\n     <div className=\"p-4 bg-white rounded-lg shadow-md\">\r\n       <h2 className=\"text-xl font-semibold\">Final Score Summary</h2>\r\n"
                },
                {
                    "date": 1740385388166,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,12 @@\n import React from \"react\";\r\n+import { useLocation, useNavigate } from \"react-router-dom\";\r\n \r\n-const PerformanceAnalysis = ({ correctAnswers = [] }) => {\r\n+const PerformanceAnalysis = () => {\r\n+  const location = useLocation();\r\n+  const navigate = useNavigate();\r\n+  const correctAnswers = location.state?.correctAnswers || [];\r\n+\r\n   // Define question categories\r\n   const questionCategories = {\r\n     Addition: [1, 3, 6, 8, 9],\r\n     Subtraction: [2, 5, 8],\r\n@@ -15,13 +20,8 @@\n     Multiplication: 0,\r\n     Division: 0,\r\n   };\r\n \r\n-  // Ensure correctAnswers is a valid array before proceeding\r\n-  if (!Array.isArray(correctAnswers)) {\r\n-    return <p>Error: No correct answers data available.</p>;\r\n-  }\r\n-\r\n   // Count correct answers in each category\r\n   correctAnswers.forEach((q) => {\r\n     for (let category in questionCategories) {\r\n       if (questionCategories[category].includes(q)) {\r\n@@ -67,8 +67,15 @@\n         ) : (\r\n           <li>None</li>\r\n         )}\r\n       </ul>\r\n+\r\n+      <button\r\n+        className=\"mt-4 px-4 py-2 bg-blue-500 text-white rounded\"\r\n+        onClick={() => navigate(\"/quiz\")}\r\n+      >\r\n+        Try Again\r\n+      </button>\r\n     </div>\r\n   );\r\n };\r\n \r\n"
                },
                {
                    "date": 1740385842013,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,14 +5,17 @@\n   const location = useLocation();\r\n   const navigate = useNavigate();\r\n   const correctAnswers = location.state?.correctAnswers || [];\r\n \r\n-  // Define question categories\r\n+  // Convert correctAnswers from 0-based to 1-based indexing\r\n+  const correctedAnswers = correctAnswers.map((q) => q + 1);\r\n+\r\n+  // Define question categories correctly\r\n   const questionCategories = {\r\n-    Addition: [1, 3, 6, 8, 9],\r\n-    Subtraction: [2, 5, 8],\r\n-    Multiplication: [6, 10],\r\n-    Division: [4, 7, 9],\r\n+    Addition: [1, 5, 9],\r\n+    Subtraction: [2, 4, 8],\r\n+    Multiplication: [3, 6, 10],\r\n+    Division: [7],\r\n   };\r\n \r\n   let questionStats = {\r\n     Addition: 0,\r\n@@ -21,9 +24,9 @@\n     Division: 0,\r\n   };\r\n \r\n   // Count correct answers in each category\r\n-  correctAnswers.forEach((q) => {\r\n+  correctedAnswers.forEach((q) => {\r\n     for (let category in questionCategories) {\r\n       if (questionCategories[category].includes(q)) {\r\n         questionStats[category]++;\r\n       }\r\n@@ -55,18 +58,18 @@\n       <ul>\r\n         {strengths.length > 0 ? (\r\n           strengths.map((s, index) => <li key={index}>✅ {s}</li>)\r\n         ) : (\r\n-          <li>None</li>\r\n+          <li>No strengths identified</li>\r\n         )}\r\n       </ul>\r\n \r\n       <h3 className=\"mt-4 font-semibold text-red-600\">Weaknesses</h3>\r\n       <ul>\r\n         {weaknesses.length > 0 ? (\r\n           weaknesses.map((w, index) => <li key={index}>❌ {w}</li>)\r\n         ) : (\r\n-          <li>None</li>\r\n+          <li>No weaknesses identified</li>\r\n         )}\r\n       </ul>\r\n \r\n       <button\r\n"
                },
                {
                    "date": 1740386122260,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,15 +70,8 @@\n         ) : (\r\n           <li>No weaknesses identified</li>\r\n         )}\r\n       </ul>\r\n-\r\n-      <button\r\n-        className=\"mt-4 px-4 py-2 bg-blue-500 text-white rounded\"\r\n-        onClick={() => navigate(\"/quiz\")}\r\n-      >\r\n-        Try Again\r\n-      </button>\r\n     </div>\r\n   );\r\n };\r\n \r\n"
                }
            ],
            "date": 1740384727204,
            "name": "Commit-0",
            "content": "import React from \"react\";\r\n\r\nconst PerformanceAnalysis = ({ correctAnswers }) => {\r\n  // Define question categories\r\n  const questionCategories = {\r\n    Addition: [1, 3, 6, 8, 9],\r\n    Subtraction: [2, 5, 8],\r\n    Multiplication: [6, 10],\r\n    Division: [4, 7, 9],\r\n  };\r\n\r\n  let questionStats = {\r\n    Addition: 0,\r\n    Subtraction: 0,\r\n    Multiplication: 0,\r\n    Division: 0,\r\n  };\r\n\r\n  // Count correct answers in each category\r\n  correctAnswers.forEach((q) => {\r\n    for (let category in questionCategories) {\r\n      if (questionCategories[category].includes(q)) {\r\n        questionStats[category]++;\r\n      }\r\n    }\r\n  });\r\n\r\n  // Convert to array for processing\r\n  const operationCounts = Object.entries(questionStats);\r\n\r\n  // Finding max & min attempted operations\r\n  const maxCount = Math.max(...Object.values(questionStats));\r\n  const minCount = Math.min(...Object.values(questionStats));\r\n\r\n  // Identify strengths & weaknesses\r\n  const strengths = operationCounts\r\n    .filter(([_, count]) => count === maxCount && count > 0)\r\n    .map(([operation]) => operation);\r\n\r\n  const weaknesses = operationCounts\r\n    .filter(([_, count]) => count === minCount && count > 0)\r\n    .map(([operation]) => operation);\r\n\r\n  return (\r\n    <div className=\"p-4 bg-white rounded-lg shadow-md\">\r\n      <h2 className=\"text-xl font-semibold\">Final Score Summary</h2>\r\n\r\n      <h3 className=\"mt-4 font-semibold text-green-600\">Strengths</h3>\r\n      <ul>\r\n        {strengths.length > 0 ? (\r\n          strengths.map((s, index) => <li key={index}>✅ {s}</li>)\r\n        ) : (\r\n          <li>None</li>\r\n        )}\r\n      </ul>\r\n\r\n      <h3 className=\"mt-4 font-semibold text-red-600\">Weaknesses</h3>\r\n      <ul>\r\n        {weaknesses.length > 0 ? (\r\n          weaknesses.map((w, index) => <li key={index}>❌ {w}</li>)\r\n        ) : (\r\n          <li>None</li>\r\n        )}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PerformanceAnalysis;\r\n"
        }
    ]
}