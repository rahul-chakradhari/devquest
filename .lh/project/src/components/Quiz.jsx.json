{
    "sourceFile": "project/src/components/Quiz.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 9,
            "patches": [
                {
                    "date": 1740365614521,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740384035195,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,8 +105,9 @@\n         answeredQuestions={Object.keys(selectedAnswers).length}\r\n         totalQuestions={questions.length}\r\n         correctCount={score ?? 0}\r\n         previousCorrect={0}\r\n+        showFinalResult={showFeedback} // Pass `showFeedback` to control visibility\r\n       />\r\n \r\n       {showFeedback ? (\r\n         <>\r\n"
                },
                {
                    "date": 1740384238875,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,46 +1,14 @@\n import React, { useState, useEffect } from \"react\";\r\n import ProgressBar from \"./ProgressBar\";\r\n \r\n-const questions = [\r\n-  { question: \"What is 5 + 3?\", options: [\"6\", \"7\", \"8\", \"9\"], answer: \"8\" },\r\n-  { question: \"What is 12 - 4?\", options: [\"6\", \"7\", \"8\", \"9\"], answer: \"8\" },\r\n-  {\r\n-    question: \"Solve: (2 + 3) √ó 4\",\r\n-    options: [\"20\", \"10\", \"25\", \"30\"],\r\n-    answer: \"20\",\r\n-  },\r\n-  { question: \"What is 9 √∑ 3?\", options: [\"1\", \"3\", \"9\", \"6\"], answer: \"3\" },\r\n-  {\r\n-    question: \"Solve: 15 - (4 + 3)\",\r\n-    options: [\"6\", \"8\", \"9\", \"12\"],\r\n-    answer: \"8\",\r\n-  },\r\n-  {\r\n-    question: \"What is 7 √ó 2?\",\r\n-    options: [\"10\", \"12\", \"14\", \"16\"],\r\n-    answer: \"14\",\r\n-  },\r\n-  {\r\n-    question: \"Solve: (8 + 2) √∑ 2\",\r\n-    options: [\"2\", \"4\", \"5\", \"6\"],\r\n-    answer: \"5\",\r\n-  },\r\n-  {\r\n-    question: \"What is 4 √ó 3 - 2?\",\r\n-    options: [\"10\", \"11\", \"12\", \"14\"],\r\n-    answer: \"10\",\r\n-  },\r\n-  { question: \"Solve: 6 + 4 √∑ 2\", options: [\"3\", \"5\", \"8\", \"10\"], answer: \"8\" },\r\n-  { question: \"What is 3¬≤?\", options: [\"6\", \"9\", \"12\", \"15\"], answer: \"9\" },\r\n-];\r\n-\r\n const Quiz = () => {\r\n   const [currentQuestion, setCurrentQuestion] = useState(0);\r\n   const [selectedAnswers, setSelectedAnswers] = useState({});\r\n   const [timeLeft, setTimeLeft] = useState(15);\r\n   const [score, setScore] = useState(null);\r\n   const [showFeedback, setShowFeedback] = useState(false);\r\n+  const [correctHistory, setCorrectHistory] = useState([]); // ‚úÖ Store previous scores\r\n \r\n   useEffect(() => {\r\n     if (timeLeft === 0) {\r\n       handleNext();\r\n@@ -59,14 +27,8 @@\n       setCurrentQuestion(currentQuestion + 1);\r\n     }\r\n   };\r\n \r\n-  const handlePrev = () => {\r\n-    if (currentQuestion > 0) {\r\n-      setCurrentQuestion(currentQuestion - 1);\r\n-    }\r\n-  };\r\n-\r\n   const handleAnswerClick = (option) => {\r\n     setSelectedAnswers({\r\n       ...selectedAnswers,\r\n       [currentQuestion]: option,\r\n@@ -84,20 +46,17 @@\n     setScore(calculatedScore);\r\n     setShowFeedback(true);\r\n   };\r\n \r\n-  const getFeedback = () => {\r\n-    if (score >= 8)\r\n-      return { message: \"üéâ Excellent! Keep it up!\", color: \"text-success\" };\r\n-    if (score >= 5)\r\n-      return {\r\n-        message: \"üôÇ Average scorer! You can do better!\",\r\n-        color: \"text-warning\",\r\n-      };\r\n-    return {\r\n-      message: \"üòü Low grade! Please improve yourself.\",\r\n-      color: \"text-danger\",\r\n-    };\r\n+  const handleRestart = () => {\r\n+    if (score !== null) {\r\n+      setCorrectHistory([...correctHistory, score]); // ‚úÖ Store score before restarting\r\n+    }\r\n+    setCurrentQuestion(0);\r\n+    setSelectedAnswers({});\r\n+    setScore(null);\r\n+    setShowFeedback(false);\r\n+    setTimeLeft(15);\r\n   };\r\n \r\n   return (\r\n     <div className=\"quiz-container\">\r\n@@ -105,39 +64,23 @@\n         answeredQuestions={Object.keys(selectedAnswers).length}\r\n         totalQuestions={questions.length}\r\n         correctCount={score ?? 0}\r\n         previousCorrect={0}\r\n-        showFinalResult={showFeedback} // Pass `showFeedback` to control visibility\r\n+        showFinalResult={showFeedback}\r\n+        correctHistory={correctHistory} // ‚úÖ Pass history\r\n       />\r\n \r\n       {showFeedback ? (\r\n         <>\r\n           <h2 className=\"text-success\">Quiz Completed!</h2>\r\n           <h3 className=\"text-primary\">\r\n             Your Score: {score} / {questions.length}\r\n           </h3>\r\n-          <h4 className={getFeedback().color}>{getFeedback().message}</h4>\r\n \r\n-          <div className=\"feedback mt-3\">\r\n-            {questions.map((q, index) => (\r\n-              <p\r\n-                key={index}\r\n-                className={`text-${\r\n-                  selectedAnswers[index] === q.answer ? \"success\" : \"danger\"\r\n-                }`}\r\n-              >\r\n-                {index + 1}. {q.question} -{\" \"}\r\n-                {selectedAnswers[index] === q.answer\r\n-                  ? \" ‚úÖ Correct\"\r\n-                  : ` ‚ùå Incorrect (Correct: ${q.answer})`}\r\n-              </p>\r\n-            ))}\r\n-          </div>\r\n-\r\n           <button\r\n             type=\"button\"\r\n             className=\"btn btn-warning mt-3\"\r\n-            onClick={() => window.location.reload()}\r\n+            onClick={handleRestart}\r\n           >\r\n             Restart Quiz\r\n           </button>\r\n         </>\r\n@@ -167,17 +110,8 @@\n             })}\r\n           </div>\r\n \r\n           <div className=\"quiz-controls mt-3\">\r\n-            <button\r\n-              type=\"button\"\r\n-              className=\"btn btn-primary mx-2\"\r\n-              onClick={handlePrev}\r\n-              disabled={currentQuestion === 0}\r\n-            >\r\n-              Prev\r\n-            </button>\r\n-\r\n             {currentQuestion < questions.length - 1 && (\r\n               <button\r\n                 type=\"button\"\r\n                 className=\"btn btn-primary mx-2\"\r\n"
                },
                {
                    "date": 1740384370491,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,58 @@\n import React, { useState, useEffect } from \"react\";\r\n import ProgressBar from \"./ProgressBar\";\r\n+const questions = [\r\n+  {\r\n+    question: \"6 + 2 √ó 3 = ?\",\r\n+    options: [\"24\", \"12\", \"10\", \"18\"],\r\n+    answer: \"12\",\r\n+  },\r\n+  {\r\n+    question: \"8 √ó (5 - 2) = ?\",\r\n+    options: [\"16\", \"24\", \"30\", \"40\"],\r\n+    answer: \"24\",\r\n+  },\r\n+  {\r\n+    question: \"20 √∑ 5 + 3 √ó 2 = ?\",\r\n+    options: [\"10\", \"12\", \"8\", \"14\"],\r\n+    answer: \"10\",\r\n+  },\r\n+  {\r\n+    question: \"15 - 3 √ó 4 √∑ 2 = ?\",\r\n+    options: [\"6\", \"9\", \"12\", \"3\"],\r\n+    answer: \"9\",\r\n+  },\r\n+  {\r\n+    question: \"(12 + 4) √∑ 4 √ó 3 = ?\",\r\n+    options: [\"9\", \"12\", \"10\", \"6\"],\r\n+    answer: \"12\",\r\n+  },\r\n+  {\r\n+    question: \"7 √ó 3 + 8 √∑ 2 = ?\",\r\n+    options: [\"29\", \"24\", \"28\", \"31\"],\r\n+    answer: \"29\",\r\n+  },\r\n+  {\r\n+    question: \"(18 - 6) √∑ 2 + 5 = ?\",\r\n+    options: [\"10\", \"8\", \"6\", \"7\"],\r\n+    answer: \"11\",\r\n+  },\r\n+  {\r\n+    question: \"5 + 4 √ó (3 + 1) = ?\",\r\n+    options: [\"25\", \"21\", \"17\", \"22\"],\r\n+    answer: \"21\",\r\n+  },\r\n+  {\r\n+    question: \"30 √∑ (5 √ó 2) + 6 = ?\",\r\n+    options: [\"12\", \"9\", \"6\", \"8\"],\r\n+    answer: \"9\",\r\n+  },\r\n+  {\r\n+    question: \"(9 + 3) √ó 2 - 4 = ?\",\r\n+    options: [\"18\", \"16\", \"20\", \"22\"],\r\n+    answer: \"20\",\r\n+  },\r\n+];\r\n \r\n const Quiz = () => {\r\n   const [currentQuestion, setCurrentQuestion] = useState(0);\r\n   const [selectedAnswers, setSelectedAnswers] = useState({});\r\n"
                },
                {
                    "date": 1740384409131,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,66 +1,46 @@\n import React, { useState, useEffect } from \"react\";\r\n import ProgressBar from \"./ProgressBar\";\r\n+\r\n const questions = [\r\n+  { question: \"What is 5 + 3?\", options: [\"6\", \"7\", \"8\", \"9\"], answer: \"8\" },\r\n+  { question: \"What is 12 - 4?\", options: [\"6\", \"7\", \"8\", \"9\"], answer: \"8\" },\r\n   {\r\n-    question: \"6 + 2 √ó 3 = ?\",\r\n-    options: [\"24\", \"12\", \"10\", \"18\"],\r\n-    answer: \"12\",\r\n+    question: \"Solve: (2 + 3) √ó 4\",\r\n+    options: [\"20\", \"10\", \"25\", \"30\"],\r\n+    answer: \"20\",\r\n   },\r\n+  { question: \"What is 9 √∑ 3?\", options: [\"1\", \"3\", \"9\", \"6\"], answer: \"3\" },\r\n   {\r\n-    question: \"8 √ó (5 - 2) = ?\",\r\n-    options: [\"16\", \"24\", \"30\", \"40\"],\r\n-    answer: \"24\",\r\n+    question: \"Solve: 15 - (4 + 3)\",\r\n+    options: [\"6\", \"8\", \"9\", \"12\"],\r\n+    answer: \"8\",\r\n   },\r\n   {\r\n-    question: \"20 √∑ 5 + 3 √ó 2 = ?\",\r\n-    options: [\"10\", \"12\", \"8\", \"14\"],\r\n-    answer: \"10\",\r\n+    question: \"What is 7 √ó 2?\",\r\n+    options: [\"10\", \"12\", \"14\", \"16\"],\r\n+    answer: \"14\",\r\n   },\r\n   {\r\n-    question: \"15 - 3 √ó 4 √∑ 2 = ?\",\r\n-    options: [\"6\", \"9\", \"12\", \"3\"],\r\n-    answer: \"9\",\r\n+    question: \"Solve: (8 + 2) √∑ 2\",\r\n+    options: [\"2\", \"4\", \"5\", \"6\"],\r\n+    answer: \"5\",\r\n   },\r\n   {\r\n-    question: \"(12 + 4) √∑ 4 √ó 3 = ?\",\r\n-    options: [\"9\", \"12\", \"10\", \"6\"],\r\n-    answer: \"12\",\r\n+    question: \"What is 4 √ó 3 - 2?\",\r\n+    options: [\"10\", \"11\", \"12\", \"14\"],\r\n+    answer: \"10\",\r\n   },\r\n-  {\r\n-    question: \"7 √ó 3 + 8 √∑ 2 = ?\",\r\n-    options: [\"29\", \"24\", \"28\", \"31\"],\r\n-    answer: \"29\",\r\n-  },\r\n-  {\r\n-    question: \"(18 - 6) √∑ 2 + 5 = ?\",\r\n-    options: [\"10\", \"8\", \"6\", \"7\"],\r\n-    answer: \"11\",\r\n-  },\r\n-  {\r\n-    question: \"5 + 4 √ó (3 + 1) = ?\",\r\n-    options: [\"25\", \"21\", \"17\", \"22\"],\r\n-    answer: \"21\",\r\n-  },\r\n-  {\r\n-    question: \"30 √∑ (5 √ó 2) + 6 = ?\",\r\n-    options: [\"12\", \"9\", \"6\", \"8\"],\r\n-    answer: \"9\",\r\n-  },\r\n-  {\r\n-    question: \"(9 + 3) √ó 2 - 4 = ?\",\r\n-    options: [\"18\", \"16\", \"20\", \"22\"],\r\n-    answer: \"20\",\r\n-  },\r\n+  { question: \"Solve: 6 + 4 √∑ 2\", options: [\"3\", \"5\", \"8\", \"10\"], answer: \"8\" },\r\n+  { question: \"What is 3¬≤?\", options: [\"6\", \"9\", \"12\", \"15\"], answer: \"9\" },\r\n ];\r\n \r\n const Quiz = () => {\r\n   const [currentQuestion, setCurrentQuestion] = useState(0);\r\n   const [selectedAnswers, setSelectedAnswers] = useState({});\r\n   const [timeLeft, setTimeLeft] = useState(15);\r\n   const [score, setScore] = useState(null);\r\n   const [showFeedback, setShowFeedback] = useState(false);\r\n-  const [correctHistory, setCorrectHistory] = useState([]); // ‚úÖ Store previous scores\r\n \r\n   useEffect(() => {\r\n     if (timeLeft === 0) {\r\n       handleNext();\r\n@@ -79,8 +59,14 @@\n       setCurrentQuestion(currentQuestion + 1);\r\n     }\r\n   };\r\n \r\n+  const handlePrev = () => {\r\n+    if (currentQuestion > 0) {\r\n+      setCurrentQuestion(currentQuestion - 1);\r\n+    }\r\n+  };\r\n+\r\n   const handleAnswerClick = (option) => {\r\n     setSelectedAnswers({\r\n       ...selectedAnswers,\r\n       [currentQuestion]: option,\r\n@@ -98,17 +84,20 @@\n     setScore(calculatedScore);\r\n     setShowFeedback(true);\r\n   };\r\n \r\n-  const handleRestart = () => {\r\n-    if (score !== null) {\r\n-      setCorrectHistory([...correctHistory, score]); // ‚úÖ Store score before restarting\r\n-    }\r\n-    setCurrentQuestion(0);\r\n-    setSelectedAnswers({});\r\n-    setScore(null);\r\n-    setShowFeedback(false);\r\n-    setTimeLeft(15);\r\n+  const getFeedback = () => {\r\n+    if (score >= 8)\r\n+      return { message: \"üéâ Excellent! Keep it up!\", color: \"text-success\" };\r\n+    if (score >= 5)\r\n+      return {\r\n+        message: \"üôÇ Average scorer! You can do better!\",\r\n+        color: \"text-warning\",\r\n+      };\r\n+    return {\r\n+      message: \"üòü Low grade! Please improve yourself.\",\r\n+      color: \"text-danger\",\r\n+    };\r\n   };\r\n \r\n   return (\r\n     <div className=\"quiz-container\">\r\n@@ -116,23 +105,39 @@\n         answeredQuestions={Object.keys(selectedAnswers).length}\r\n         totalQuestions={questions.length}\r\n         correctCount={score ?? 0}\r\n         previousCorrect={0}\r\n-        showFinalResult={showFeedback}\r\n-        correctHistory={correctHistory} // ‚úÖ Pass history\r\n+        showFinalResult={showFeedback} // Pass `showFeedback` to control visibility\r\n       />\r\n \r\n       {showFeedback ? (\r\n         <>\r\n           <h2 className=\"text-success\">Quiz Completed!</h2>\r\n           <h3 className=\"text-primary\">\r\n             Your Score: {score} / {questions.length}\r\n           </h3>\r\n+          <h4 className={getFeedback().color}>{getFeedback().message}</h4>\r\n \r\n+          <div className=\"feedback mt-3\">\r\n+            {questions.map((q, index) => (\r\n+              <p\r\n+                key={index}\r\n+                className={`text-${\r\n+                  selectedAnswers[index] === q.answer ? \"success\" : \"danger\"\r\n+                }`}\r\n+              >\r\n+                {index + 1}. {q.question} -{\" \"}\r\n+                {selectedAnswers[index] === q.answer\r\n+                  ? \" ‚úÖ Correct\"\r\n+                  : ` ‚ùå Incorrect (Correct: ${q.answer})`}\r\n+              </p>\r\n+            ))}\r\n+          </div>\r\n+\r\n           <button\r\n             type=\"button\"\r\n             className=\"btn btn-warning mt-3\"\r\n-            onClick={handleRestart}\r\n+            onClick={() => window.location.reload()}\r\n           >\r\n             Restart Quiz\r\n           </button>\r\n         </>\r\n@@ -162,8 +167,17 @@\n             })}\r\n           </div>\r\n \r\n           <div className=\"quiz-controls mt-3\">\r\n+            <button\r\n+              type=\"button\"\r\n+              className=\"btn btn-primary mx-2\"\r\n+              onClick={handlePrev}\r\n+              disabled={currentQuestion === 0}\r\n+            >\r\n+              Prev\r\n+            </button>\r\n+\r\n             {currentQuestion < questions.length - 1 && (\r\n               <button\r\n                 type=\"button\"\r\n                 className=\"btn btn-primary mx-2\"\r\n"
                },
                {
                    "date": 1740385027859,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n import React, { useState, useEffect } from \"react\";\r\n import ProgressBar from \"./ProgressBar\";\r\n+import PerformanceAnalysis from \"./PerformanceAnalysis\"; // Import Performance Analysis\r\n \r\n const questions = [\r\n   { question: \"What is 5 + 3?\", options: [\"6\", \"7\", \"8\", \"9\"], answer: \"8\" },\r\n   { question: \"What is 12 - 4?\", options: [\"6\", \"7\", \"8\", \"9\"], answer: \"8\" },\r\n@@ -39,8 +40,9 @@\n   const [selectedAnswers, setSelectedAnswers] = useState({});\r\n   const [timeLeft, setTimeLeft] = useState(15);\r\n   const [score, setScore] = useState(null);\r\n   const [showFeedback, setShowFeedback] = useState(false);\r\n+  const [correctAnswers, setCorrectAnswers] = useState([]); // Store correct answers\r\n \r\n   useEffect(() => {\r\n     if (timeLeft === 0) {\r\n       handleNext();\r\n@@ -74,18 +76,32 @@\n   };\r\n \r\n   const handleSubmit = () => {\r\n     let calculatedScore = 0;\r\n+    let correctAnswersList = [];\r\n \r\n     questions.forEach((q, index) => {\r\n       const userAnswer = selectedAnswers[index];\r\n-      if (userAnswer === q.answer) calculatedScore += 1;\r\n+      if (userAnswer === q.answer) {\r\n+        calculatedScore += 1;\r\n+        correctAnswersList.push(index + 1); // Store correct question indexes\r\n+      }\r\n     });\r\n \r\n     setScore(calculatedScore);\r\n+    setCorrectAnswers(correctAnswersList);\r\n     setShowFeedback(true);\r\n   };\r\n \r\n+  const restartQuiz = () => {\r\n+    setCurrentQuestion(0);\r\n+    setSelectedAnswers({});\r\n+    setTimeLeft(15);\r\n+    setScore(null);\r\n+    setShowFeedback(false);\r\n+    setCorrectAnswers([]);\r\n+  };\r\n+\r\n   const getFeedback = () => {\r\n     if (score >= 8)\r\n       return { message: \"üéâ Excellent! Keep it up!\", color: \"text-success\" };\r\n     if (score >= 5)\r\n@@ -105,9 +121,9 @@\n         answeredQuestions={Object.keys(selectedAnswers).length}\r\n         totalQuestions={questions.length}\r\n         correctCount={score ?? 0}\r\n         previousCorrect={0}\r\n-        showFinalResult={showFeedback} // Pass `showFeedback` to control visibility\r\n+        showFinalResult={showFeedback}\r\n       />\r\n \r\n       {showFeedback ? (\r\n         <>\r\n@@ -132,12 +148,15 @@\n               </p>\r\n             ))}\r\n           </div>\r\n \r\n+          {/* Performance Analysis Component */}\r\n+          <PerformanceAnalysis correctAnswers={correctAnswers} />\r\n+\r\n           <button\r\n             type=\"button\"\r\n             className=\"btn btn-warning mt-3\"\r\n-            onClick={() => window.location.reload()}\r\n+            onClick={restartQuiz}\r\n           >\r\n             Restart Quiz\r\n           </button>\r\n         </>\r\n@@ -176,17 +195,16 @@\n             >\r\n               Prev\r\n             </button>\r\n \r\n-            {currentQuestion < questions.length - 1 && (\r\n-              <button\r\n-                type=\"button\"\r\n-                className=\"btn btn-primary mx-2\"\r\n-                onClick={handleNext}\r\n-              >\r\n-                Next\r\n-              </button>\r\n-            )}\r\n+            <button\r\n+              type=\"button\"\r\n+              className=\"btn btn-primary mx-2\"\r\n+              onClick={handleNext}\r\n+              disabled={!selectedAnswers[currentQuestion]}\r\n+            >\r\n+              Next\r\n+            </button>\r\n           </div>\r\n \r\n           <div className=\"submit-section mt-3\">\r\n             <button\r\n"
                },
                {
                    "date": 1740385471098,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n import React, { useState, useEffect } from \"react\";\r\n+import { useNavigate } from \"react-router-dom\";\r\n import ProgressBar from \"./ProgressBar\";\r\n import PerformanceAnalysis from \"./PerformanceAnalysis\"; // Import Performance Analysis\r\n \r\n const questions = [\r\n@@ -41,8 +42,9 @@\n   const [timeLeft, setTimeLeft] = useState(15);\r\n   const [score, setScore] = useState(null);\r\n   const [showFeedback, setShowFeedback] = useState(false);\r\n   const [correctAnswers, setCorrectAnswers] = useState([]); // Store correct answers\r\n+  const navigate = useNavigate();\r\n \r\n   useEffect(() => {\r\n     if (timeLeft === 0) {\r\n       handleNext();\r\n@@ -89,8 +91,11 @@\n \r\n     setScore(calculatedScore);\r\n     setCorrectAnswers(correctAnswersList);\r\n     setShowFeedback(true);\r\n+    navigate(\"/performance-analysis\", {\r\n+      state: { correctAnswers: correctAnswersList },\r\n+    });\r\n   };\r\n \r\n   const restartQuiz = () => {\r\n     setCurrentQuestion(0);\r\n@@ -124,45 +129,10 @@\n         previousCorrect={0}\r\n         showFinalResult={showFeedback}\r\n       />\r\n \r\n-      {showFeedback ? (\r\n+      {!showFeedback ? (\r\n         <>\r\n-          <h2 className=\"text-success\">Quiz Completed!</h2>\r\n-          <h3 className=\"text-primary\">\r\n-            Your Score: {score} / {questions.length}\r\n-          </h3>\r\n-          <h4 className={getFeedback().color}>{getFeedback().message}</h4>\r\n-\r\n-          <div className=\"feedback mt-3\">\r\n-            {questions.map((q, index) => (\r\n-              <p\r\n-                key={index}\r\n-                className={`text-${\r\n-                  selectedAnswers[index] === q.answer ? \"success\" : \"danger\"\r\n-                }`}\r\n-              >\r\n-                {index + 1}. {q.question} -{\" \"}\r\n-                {selectedAnswers[index] === q.answer\r\n-                  ? \" ‚úÖ Correct\"\r\n-                  : ` ‚ùå Incorrect (Correct: ${q.answer})`}\r\n-              </p>\r\n-            ))}\r\n-          </div>\r\n-\r\n-          {/* Performance Analysis Component */}\r\n-          <PerformanceAnalysis correctAnswers={correctAnswers} />\r\n-\r\n-          <button\r\n-            type=\"button\"\r\n-            className=\"btn btn-warning mt-3\"\r\n-            onClick={restartQuiz}\r\n-          >\r\n-            Restart Quiz\r\n-          </button>\r\n-        </>\r\n-      ) : (\r\n-        <>\r\n           <h4 className=\"text-primary\">\r\n             Question {currentQuestion + 1} / {questions.length}\r\n           </h4>\r\n           <h2>{questions[currentQuestion].question}</h2>\r\n@@ -215,9 +185,9 @@\n               Submit Quiz\r\n             </button>\r\n           </div>\r\n         </>\r\n-      )}\r\n+      ) : null}\r\n     </div>\r\n   );\r\n };\r\n \r\n"
                },
                {
                    "date": 1740385642337,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -91,9 +91,9 @@\n \r\n     setScore(calculatedScore);\r\n     setCorrectAnswers(correctAnswersList);\r\n     setShowFeedback(true);\r\n-    navigate(\"/performance-analysis\", {\r\n+    navigate(\"/ana\", {\r\n       state: { correctAnswers: correctAnswersList },\r\n     });\r\n   };\r\n \r\n"
                },
                {
                    "date": 1740385941662,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -91,9 +91,9 @@\n \r\n     setScore(calculatedScore);\r\n     setCorrectAnswers(correctAnswersList);\r\n     setShowFeedback(true);\r\n-    navigate(\"/ana\", {\r\n+    navigate(\"/performance-analysis\", {\r\n       state: { correctAnswers: correctAnswersList },\r\n     });\r\n   };\r\n \r\n"
                },
                {
                    "date": 1740386015975,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,5 @@\n import React, { useState, useEffect } from \"react\";\r\n-import { useNavigate } from \"react-router-dom\";\r\n import ProgressBar from \"./ProgressBar\";\r\n import PerformanceAnalysis from \"./PerformanceAnalysis\"; // Import Performance Analysis\r\n \r\n const questions = [\r\n@@ -42,9 +41,8 @@\n   const [timeLeft, setTimeLeft] = useState(15);\r\n   const [score, setScore] = useState(null);\r\n   const [showFeedback, setShowFeedback] = useState(false);\r\n   const [correctAnswers, setCorrectAnswers] = useState([]); // Store correct answers\r\n-  const navigate = useNavigate();\r\n \r\n   useEffect(() => {\r\n     if (timeLeft === 0) {\r\n       handleNext();\r\n@@ -91,11 +89,8 @@\n \r\n     setScore(calculatedScore);\r\n     setCorrectAnswers(correctAnswersList);\r\n     setShowFeedback(true);\r\n-    navigate(\"/performance-analysis\", {\r\n-      state: { correctAnswers: correctAnswersList },\r\n-    });\r\n   };\r\n \r\n   const restartQuiz = () => {\r\n     setCurrentQuestion(0);\r\n@@ -129,10 +124,45 @@\n         previousCorrect={0}\r\n         showFinalResult={showFeedback}\r\n       />\r\n \r\n-      {!showFeedback ? (\r\n+      {showFeedback ? (\r\n         <>\r\n+          <h2 className=\"text-success\">Quiz Completed!</h2>\r\n+          <h3 className=\"text-primary\">\r\n+            Your Score: {score} / {questions.length}\r\n+          </h3>\r\n+          <h4 className={getFeedback().color}>{getFeedback().message}</h4>\r\n+\r\n+          <div className=\"feedback mt-3\">\r\n+            {questions.map((q, index) => (\r\n+              <p\r\n+                key={index}\r\n+                className={`text-${\r\n+                  selectedAnswers[index] === q.answer ? \"success\" : \"danger\"\r\n+                }`}\r\n+              >\r\n+                {index + 1}. {q.question} -{\" \"}\r\n+                {selectedAnswers[index] === q.answer\r\n+                  ? \" ‚úÖ Correct\"\r\n+                  : ` ‚ùå Incorrect (Correct: ${q.answer})`}\r\n+              </p>\r\n+            ))}\r\n+          </div>\r\n+\r\n+          {/* Performance Analysis Component */}\r\n+          <PerformanceAnalysis correctAnswers={correctAnswers} />\r\n+\r\n+          <button\r\n+            type=\"button\"\r\n+            className=\"btn btn-warning mt-3\"\r\n+            onClick={restartQuiz}\r\n+          >\r\n+            Restart Quiz\r\n+          </button>\r\n+        </>\r\n+      ) : (\r\n+        <>\r\n           <h4 className=\"text-primary\">\r\n             Question {currentQuestion + 1} / {questions.length}\r\n           </h4>\r\n           <h2>{questions[currentQuestion].question}</h2>\r\n@@ -185,9 +215,9 @@\n               Submit Quiz\r\n             </button>\r\n           </div>\r\n         </>\r\n-      ) : null}\r\n+      )}\r\n     </div>\r\n   );\r\n };\r\n \r\n"
                }
            ],
            "date": 1740365614521,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect } from \"react\";\r\nimport ProgressBar from \"./ProgressBar\";\r\n\r\nconst questions = [\r\n  { question: \"What is 5 + 3?\", options: [\"6\", \"7\", \"8\", \"9\"], answer: \"8\" },\r\n  { question: \"What is 12 - 4?\", options: [\"6\", \"7\", \"8\", \"9\"], answer: \"8\" },\r\n  {\r\n    question: \"Solve: (2 + 3) √ó 4\",\r\n    options: [\"20\", \"10\", \"25\", \"30\"],\r\n    answer: \"20\",\r\n  },\r\n  { question: \"What is 9 √∑ 3?\", options: [\"1\", \"3\", \"9\", \"6\"], answer: \"3\" },\r\n  {\r\n    question: \"Solve: 15 - (4 + 3)\",\r\n    options: [\"6\", \"8\", \"9\", \"12\"],\r\n    answer: \"8\",\r\n  },\r\n  {\r\n    question: \"What is 7 √ó 2?\",\r\n    options: [\"10\", \"12\", \"14\", \"16\"],\r\n    answer: \"14\",\r\n  },\r\n  {\r\n    question: \"Solve: (8 + 2) √∑ 2\",\r\n    options: [\"2\", \"4\", \"5\", \"6\"],\r\n    answer: \"5\",\r\n  },\r\n  {\r\n    question: \"What is 4 √ó 3 - 2?\",\r\n    options: [\"10\", \"11\", \"12\", \"14\"],\r\n    answer: \"10\",\r\n  },\r\n  { question: \"Solve: 6 + 4 √∑ 2\", options: [\"3\", \"5\", \"8\", \"10\"], answer: \"8\" },\r\n  { question: \"What is 3¬≤?\", options: [\"6\", \"9\", \"12\", \"15\"], answer: \"9\" },\r\n];\r\n\r\nconst Quiz = () => {\r\n  const [currentQuestion, setCurrentQuestion] = useState(0);\r\n  const [selectedAnswers, setSelectedAnswers] = useState({});\r\n  const [timeLeft, setTimeLeft] = useState(15);\r\n  const [score, setScore] = useState(null);\r\n  const [showFeedback, setShowFeedback] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (timeLeft === 0) {\r\n      handleNext();\r\n      return;\r\n    }\r\n    const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\r\n    return () => clearTimeout(timer);\r\n  }, [timeLeft]);\r\n\r\n  useEffect(() => {\r\n    setTimeLeft(15);\r\n  }, [currentQuestion]);\r\n\r\n  const handleNext = () => {\r\n    if (currentQuestion < questions.length - 1) {\r\n      setCurrentQuestion(currentQuestion + 1);\r\n    }\r\n  };\r\n\r\n  const handlePrev = () => {\r\n    if (currentQuestion > 0) {\r\n      setCurrentQuestion(currentQuestion - 1);\r\n    }\r\n  };\r\n\r\n  const handleAnswerClick = (option) => {\r\n    setSelectedAnswers({\r\n      ...selectedAnswers,\r\n      [currentQuestion]: option,\r\n    });\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    let calculatedScore = 0;\r\n\r\n    questions.forEach((q, index) => {\r\n      const userAnswer = selectedAnswers[index];\r\n      if (userAnswer === q.answer) calculatedScore += 1;\r\n    });\r\n\r\n    setScore(calculatedScore);\r\n    setShowFeedback(true);\r\n  };\r\n\r\n  const getFeedback = () => {\r\n    if (score >= 8)\r\n      return { message: \"üéâ Excellent! Keep it up!\", color: \"text-success\" };\r\n    if (score >= 5)\r\n      return {\r\n        message: \"üôÇ Average scorer! You can do better!\",\r\n        color: \"text-warning\",\r\n      };\r\n    return {\r\n      message: \"üòü Low grade! Please improve yourself.\",\r\n      color: \"text-danger\",\r\n    };\r\n  };\r\n\r\n  return (\r\n    <div className=\"quiz-container\">\r\n      <ProgressBar\r\n        answeredQuestions={Object.keys(selectedAnswers).length}\r\n        totalQuestions={questions.length}\r\n        correctCount={score ?? 0}\r\n        previousCorrect={0}\r\n      />\r\n\r\n      {showFeedback ? (\r\n        <>\r\n          <h2 className=\"text-success\">Quiz Completed!</h2>\r\n          <h3 className=\"text-primary\">\r\n            Your Score: {score} / {questions.length}\r\n          </h3>\r\n          <h4 className={getFeedback().color}>{getFeedback().message}</h4>\r\n\r\n          <div className=\"feedback mt-3\">\r\n            {questions.map((q, index) => (\r\n              <p\r\n                key={index}\r\n                className={`text-${\r\n                  selectedAnswers[index] === q.answer ? \"success\" : \"danger\"\r\n                }`}\r\n              >\r\n                {index + 1}. {q.question} -{\" \"}\r\n                {selectedAnswers[index] === q.answer\r\n                  ? \" ‚úÖ Correct\"\r\n                  : ` ‚ùå Incorrect (Correct: ${q.answer})`}\r\n              </p>\r\n            ))}\r\n          </div>\r\n\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-warning mt-3\"\r\n            onClick={() => window.location.reload()}\r\n          >\r\n            Restart Quiz\r\n          </button>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <h4 className=\"text-primary\">\r\n            Question {currentQuestion + 1} / {questions.length}\r\n          </h4>\r\n          <h2>{questions[currentQuestion].question}</h2>\r\n          <h5 className=\"text-danger\">Time Left: {timeLeft}s</h5>\r\n\r\n          <div className=\"options mt-3\">\r\n            {questions[currentQuestion].options.map((option, index) => {\r\n              const isSelected = selectedAnswers[currentQuestion] === option;\r\n              return (\r\n                <button\r\n                  key={index}\r\n                  type=\"button\"\r\n                  className={`btn ${\r\n                    isSelected ? \"btn-success\" : \"btn-info\"\r\n                  } mx-2`}\r\n                  onClick={() => handleAnswerClick(option)}\r\n                >\r\n                  {option}\r\n                </button>\r\n              );\r\n            })}\r\n          </div>\r\n\r\n          <div className=\"quiz-controls mt-3\">\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-primary mx-2\"\r\n              onClick={handlePrev}\r\n              disabled={currentQuestion === 0}\r\n            >\r\n              Prev\r\n            </button>\r\n\r\n            {currentQuestion < questions.length - 1 && (\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-primary mx-2\"\r\n                onClick={handleNext}\r\n              >\r\n                Next\r\n              </button>\r\n            )}\r\n          </div>\r\n\r\n          <div className=\"submit-section mt-3\">\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-danger mx-2\"\r\n              onClick={handleSubmit}\r\n            >\r\n              Submit Quiz\r\n            </button>\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Quiz;\r\n"
        }
    ]
}